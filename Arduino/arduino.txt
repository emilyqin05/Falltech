```
#include <Wire.h>

// MPU6050 I2C address
const int MPU_ADDR = 0x68;

// Raw accelerometer values
int16_t accelX, accelY, accelZ;
float totalAcceleration; // Magnitude of acceleration
const float g = 9.81;    // Acceleration due to gravity in m/s^2

// Fall detection thresholds
const float FALL_THRESHOLD_LOW = 0.5 * g;  // Threshold for free fall (below 0.5g)
const float FALL_THRESHOLD_HIGH = 2 * g;   // Threshold for impact (above 2g)

// LED pin
const int LED_PIN = 2;

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // Initialize the LED pin as output
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // Turn off LED initially

  // Wake up the MPU6050
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B);  // Access the power management register
  Wire.write(0);     // Set to 0 to wake up
  Wire.endTransmission();

  Serial.println("MPU6050 Initialized!");
}

void loop() {
  // Request accelerometer data
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // Starting register for accelerometer readings
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 6, true); // Request 6 bytes (2 bytes for each axis)

  // Combine high and low bytes for each axis
  accelX = (Wire.read() << 8 | Wire.read());
  accelY = (Wire.read() << 8 | Wire.read());
  accelZ = (Wire.read() << 8 | Wire.read());

  // Convert raw data to G-force values (assuming default sensitivity of 16384 LSB/g)
  float accelX_g = accelX / 16384.0 * g;
  float accelY_g = accelY / 16384.0 * g;
  float accelZ_g = accelZ / 16384.0 * g;

  // Calculate total acceleration magnitude
  totalAcceleration = sqrt(pow(accelX_g, 2) + pow(accelY_g, 2) + pow(accelZ_g, 2));

  // Fall detection logic
  if (totalAcceleration < FALL_THRESHOLD_LOW) {
    Serial.println("Free Fall Detected!");
    lightLED(); // Keep LED on for free fall
  } else if (totalAcceleration > FALL_THRESHOLD_HIGH) {
    Serial.println("Impact Detected!");
    lightLED(); // Keep LED on for impact
  } else {
    digitalWrite(LED_PIN, LOW); // Turn off LED if no event detected
  }

  // Debugging: Print acceleration data
  Serial.print("Accel X: "); Serial.print(accelX_g); Serial.print(" m/s^2\t");
  Serial.print("Accel Y: "); Serial.print(accelY_g); Serial.print(" m/s^2\t");
  Serial.print("Accel Z: "); Serial.print(accelZ_g); Serial.print(" m/s^2\t");
  Serial.print("Total: "); Serial.print(totalAcceleration); Serial.println(" m/s^2");

  delay(500); // Adjust for sensitivity
}

// Function to turn on the LED (keep it on)
void lightLED() {
  digitalWrite(LED_PIN, HIGH); // Turn the LED on
}
```